// ftms_deployed\prisma\schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExportFormat {
  CSV
  PDF
  XSL
}


model Sequence {
  name  String @id
  value Int    @default(1)
}

model ExpenseRecord {
  expense_id     String   @id
  assignment_id  String?
  receipt_id     String?  @unique
  receipt        Receipt? @relation(fields: [receipt_id], references: [receipt_id])
  category_id    String
  source_id      String?
  category       GlobalCategory @relation(fields: [category_id], references: [category_id])
  source         GlobalSource?  @relation(fields: [source_id], references: [source_id])
  total_amount   Decimal  @db.Decimal(20, 4)
  expense_date   DateTime
  created_by     String
  created_at     DateTime @default(now())
  updated_at     DateTime?
  is_deleted     Boolean  @default(false)
  payment_method_id String
  payment_method GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id])
  reimbursements Reimbursement[]
  @@unique([category_id, assignment_id, expense_date], name: "unique_expense_assignment")
  @@unique([category_id, receipt_id, expense_date], name: "unique_expense_receipt")
  @@unique([category_id, source_id, total_amount, expense_date], name: "unique_expense_other")
}

model RevenueRecord {
  revenue_id     String   @id
  assignment_id  String?
  category_id    String
  source_id      String?
  category       GlobalCategory @relation(fields: [category_id], references: [category_id])
  source         GlobalSource?  @relation(fields: [source_id], references: [source_id])
  total_amount   Decimal  @db.Decimal(20, 4)
  collection_date DateTime
  created_by     String
  created_at     DateTime @default(now())
  updated_at     DateTime?
  is_deleted     Boolean  @default(false)
  @@unique([category_id, assignment_id, collection_date], name: "unique_revenue_assignment")
  @@unique([category_id, source_id, total_amount, collection_date], name: "unique_revenue_other")
}

model AuditLog {
  log_id         String   @id @default(uuid())
  action         String
  table_affected String
  record_id      String
  performed_by   String
  timestamp      DateTime @default(now())
  details        Json?
  ip_address     String?
}

model AssignmentCache {
  assignment_id     String   @id
  bus_route         String
  date_assigned     DateTime
  trip_fuel_expense Decimal  @db.Decimal(20, 4)
  trip_revenue      Decimal  @db.Decimal(20, 4)
  is_expense_recorded      Boolean  @default(false)
  is_revenue_recorded      Boolean  @default(false)
  assignment_type   String
  assignment_value  Decimal  @db.Decimal(20, 4)
  payment_method    String
  driver_id         String
  conductor_id      String
  bus_plate_number  String
  bus_type          String
  last_updated      DateTime @default(now())
}

model Receipt {
  receipt_id          String   @id
  supplier           String
  transaction_date   DateTime
  vat_reg_tin        String?
  terms_id           String
  terms              GlobalTerms @relation(fields: [terms_id], references: [id])
  date_paid          DateTime?
  payment_status_id  String
  payment_status     GlobalPaymentStatus @relation(fields: [payment_status_id], references: [id])
  total_amount       Decimal   @db.Decimal(20, 4)
  vat_amount         Decimal?  @db.Decimal(20, 4)
  total_amount_due   Decimal   @db.Decimal(20, 4)
  created_at         DateTime @default(now())
  updated_at         DateTime?
  created_by         String
  updated_by         String?
  is_deleted         Boolean   @default(false)
  deletion_reason    String?
  deleted_by         String?
  deleted_at         DateTime?
  source_id          String?
  category_id        String
  source             GlobalSource? @relation(fields: [source_id], references: [source_id])
  category           GlobalCategory @relation(fields: [category_id], references: [category_id])
  remarks            String?
  ocr_confidence     Float?
  ocr_file_path      String?
  is_expense_recorded Boolean  @default(false)
  items              ReceiptItem[]
  transactions       ItemTransaction[]
  expense            ExpenseRecord?
  exports            ReceiptExport[]
  ocr_fields         ReceiptOCRField[]
  keywords           ReceiptKeyword[]
  storage_size_bytes BigInt?
  @@index([transaction_date, is_deleted])
}

model ReceiptItem {
  receipt_item_id    String   @id
  receipt_id         String
  item_id            String
  receipt            Receipt   @relation(fields: [receipt_id], references: [receipt_id], onDelete: Cascade)
  item               Item      @relation(fields: [item_id], references: [item_id])
  quantity           Decimal   @db.Decimal(10, 2)
  unit_price         Decimal   @db.Decimal(20, 4)
  total_price        Decimal   @db.Decimal(20, 4)
  created_at         DateTime  @default(now())
  updated_at         DateTime?
  created_by         String
  updated_by         String?
  is_deleted         Boolean   @default(false)
  ocr_confidence     Float?
  is_inventory_processed Boolean @default(false)
  @@unique([receipt_id, item_id])
}

model Item {
  item_id       String   @id
  item_name     String   @unique
  unit_id       String
  unit          GlobalItemUnit @relation(fields: [unit_id], references: [id])
  category_id   String
  category      GlobalCategory @relation(fields: [category_id], references: [category_id])
  created_at    DateTime @default(now())
  updated_at    DateTime?
  is_deleted    Boolean  @default(false)
  transactions  ItemTransaction[]
  receipt_items ReceiptItem[]
  @@index([item_name, is_deleted])
  @@index([category_id, is_deleted])
  @@index([is_deleted, category_id, item_name])
}

model ItemTransaction {
  transaction_id String   @id
  item_id       String
  item          Item     @relation(fields: [item_id], references: [item_id])
  receipt_id    String?
  receipt       Receipt? @relation(fields: [receipt_id], references: [receipt_id])
  quantity      Decimal  @db.Decimal(10, 2)
  unit_price    Decimal  @db.Decimal(20, 4)
  transaction_date DateTime @default(now())
  created_by    String
  created_at    DateTime @default(now())
  updated_at    DateTime?
  is_deleted    Boolean  @default(false)
  @@index([item_id, transaction_date])
  @@index([transaction_date, is_deleted])
  @@index([is_deleted, transaction_date])
  @@index([item_id, is_deleted, transaction_date])
}

model ReceiptExport {
  export_id     String   @id
  receipt_id    String
  receipt       Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  format        ExportFormat
  exported_by   String
  exported_at   DateTime @default(now())
  filters_used  Json?
  file_path     String?
}

model ReceiptStorageConfig {
  config_id           String   @id
  auto_archive_months Int      @default(6)
  last_cleanup        DateTime @default(now())
  updated_by         String
  updated_at         DateTime @default(now())
}

model ReceiptOCRField {
  field_id           String   @id
  receipt_id         String
  receipt            Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  field_name         String
  extracted_value    String
  confidence_score   Float
  is_verified        Boolean  @default(false)
  verified_by        String?
  verified_at        DateTime?
  original_image_coords Json?
  created_at         DateTime @default(now())
  updated_at         DateTime?
  @@unique([receipt_id, field_name])
}

model ReceiptKeyword {
  keyword_id     String   @id
  receipt_id     String
  receipt        Receipt  @relation(fields: [receipt_id], references: [receipt_id])
  keyword        String
  source         String
  confidence     Float?
  created_at     DateTime @default(now())
  @@index([keyword])
}

model ReceiptStorageMetrics {
  metric_id           String   @id
  total_receipts      Int      @default(0)
  storage_used_bytes  BigInt   @default(0)
  last_updated        DateTime @default(now())
  created_by          String
  updated_by          String?
}

model EmployeeCache {
  employee_id  String   @id
  name         String
  job_title    String
  last_updated DateTime @default(now())
}

model Reimbursement {
  reimbursement_id String   @id @default(uuid())
  expense_id       String
  employee_id      String
  employee_name    String
  job_title        String?
  amount           Decimal  @db.Decimal(20, 4)
  status_id        String
  status           GlobalReimbursementStatus @relation(fields: [status_id], references: [id])
  requested_date   DateTime @default(now())
  approved_by      String?
  approved_date    DateTime?
  rejection_reason String?
  paid_by          String?
  paid_date        DateTime?
  payment_reference String?
  payment_method   String?
  remarks          String? 
  created_by       String
  created_at       DateTime @default(now())
  updated_by       String?
  updated_at       DateTime?
  is_deleted       Boolean  @default(false)
  cancelled_by     String?
  cancelled_date   DateTime?
  expense          ExpenseRecord @relation(fields: [expense_id], references: [expense_id])
  @@unique([expense_id, employee_id])
}

model GlobalSource {
  source_id    String   @id @default(uuid())
  name         String   @unique
  applicable_modules String[]
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  revenues     RevenueRecord[]
  receipts     Receipt[]
}

model GlobalCategory {
  category_id  String   @id @default(uuid())
  name         String   @unique
  applicable_modules String[]
  is_deleted   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime?
  expenses     ExpenseRecord[]
  revenues     RevenueRecord[]
  items        Item[]
  receipts     Receipt[]
}

model GlobalPaymentStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  applicable_modules String[] 
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  receipts  Receipt[]
}

model GlobalTerms {
  id        String   @id @default(uuid())
  name      String   @unique
  applicable_modules String[] 
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  receipts  Receipt[]
}

model GlobalItemUnit {
  id        String   @id @default(uuid())
  name      String   @unique
  applicable_modules String[] 
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  items     Item[]
}

model GlobalPaymentMethod {
  id        String   @id @default(uuid())
  name      String   @unique
  applicable_modules String[] 
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  expenses   ExpenseRecord[]
}

model GlobalReimbursementStatus {
  id        String   @id @default(uuid())
  name      String   @unique
  applicable_modules String[]
  is_deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  reimbursements Reimbursement[]
}

model PayrollRecord {
  payroll_id        String   @id @default(uuid())
  employee_number   String
  employee_name     String
  first_name        String
  middle_name       String?
  last_name         String
  suffix            String?
  employee_status   String
  hire_date         DateTime
  termination_date  DateTime?
  job_title         String
  department        String
  payroll_period    String   // "Monthly" | "Weekly"
  payroll_start_date DateTime
  payroll_end_date   DateTime
  basic_rate        Decimal  @db.Decimal(20, 4)
  days_worked       Int      @default(0)
  
  // Earnings
  basic_pay                 Decimal @db.Decimal(20, 4) @default(0)
  overtime_regular          Decimal @db.Decimal(20, 4) @default(0)
  overtime_holiday          Decimal @db.Decimal(20, 4) @default(0)
  service_incentive_leave   Decimal @db.Decimal(20, 4) @default(0)
  holiday_pay              Decimal @db.Decimal(20, 4) @default(0)
  thirteenth_month_pay     Decimal @db.Decimal(20, 4) @default(0)
  
  // Benefits
  revenue_benefit          Decimal @db.Decimal(20, 4) @default(0)
  safety_benefit           Decimal @db.Decimal(20, 4) @default(0)
  additional_benefits      Decimal @db.Decimal(20, 4) @default(0)
  
  // Deductions
  sss_deduction            Decimal @db.Decimal(20, 4) @default(0)
  philhealth_deduction     Decimal @db.Decimal(20, 4) @default(0)
  pag_ibig_deduction       Decimal @db.Decimal(20, 4) @default(0)
  cash_advance             Decimal @db.Decimal(20, 4) @default(0)
  damage_shortage          Decimal @db.Decimal(20, 4) @default(0)
  other_deductions         Decimal @db.Decimal(20, 4) @default(0)
  
  // Totals
  gross_total_earnings     Decimal @db.Decimal(20, 4) @default(0)
  total_deductions         Decimal @db.Decimal(20, 4) @default(0)
  net_pay                  Decimal @db.Decimal(20, 4) @default(0)
  
  // Status and dates
  status                   String   @default("Pending") // "Released" | "Pending"
  date_released            DateTime?
  
  // Metadata
  created_by               String
  created_at               DateTime @default(now())
  updated_by               String?
  updated_at               DateTime?
  is_deleted               Boolean  @default(false)
  
  @@unique([employee_number, payroll_start_date, payroll_end_date])
  @@index([payroll_start_date, payroll_end_date])
  @@index([employee_number, is_deleted])
}