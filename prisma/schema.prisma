generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sequence {
  name  String @id
  value Int    @default(1)
}

model ExpenseRecord {
  expense_id        String              @id
  assignment_id     String?
  bus_trip_id       String?
  total_amount      Decimal             @db.Decimal(20, 4)
  receipt_id        String?             @unique
  created_at        DateTime            @default(now())
  updated_at        DateTime?
  created_by        String
  expense_date      DateTime
  is_deleted        Boolean             @default(false)
  category_id       String
  source_id         String?
  payment_method_id String
  category          GlobalCategory      @relation(fields: [category_id], references: [category_id])
  payment_method    GlobalPaymentMethod @relation(fields: [payment_method_id], references: [id])
  receipt           Receipt?            @relation(fields: [receipt_id], references: [receipt_id])
  source            GlobalSource?       @relation(fields: [source_id], references: [source_id])
  reimbursements    Reimbursement[]

  @@unique([category_id, assignment_id, expense_date], name: "unique_expense_assignment")
  @@unique([category_id, assignment_id, bus_trip_id, expense_date], name: "unique_expense_assignment_trip")
  @@unique([category_id, receipt_id, expense_date], name: "unique_expense_receipt")
  @@unique([category_id, source_id, total_amount, expense_date], name: "unique_expense_other")
}

model RevenueRecord {
  revenue_id      String         @id
  assignment_id   String?
  bus_trip_id     String?
  total_amount    Decimal        @db.Decimal(20, 4)
  created_by      String
  created_at      DateTime       @default(now())
  updated_at      DateTime?
  is_deleted      Boolean        @default(false)
  collection_date DateTime
  category_id     String
  source_id       String?
  category        GlobalCategory @relation(fields: [category_id], references: [category_id])
  source          GlobalSource?  @relation(fields: [source_id], references: [source_id])

  @@unique([category_id, assignment_id, collection_date], name: "unique_revenue_assignment")
  @@unique([category_id, source_id, total_amount, collection_date], name: "unique_revenue_other")
}

model AuditLog {
  log_id         String   @id @default(uuid())
  action         String
  table_affected String
  record_id      String
  performed_by   String
  timestamp      DateTime @default(now())
  ip_address     String?
  details        Json?
}

model AssignmentCache {
  assignment_id       String   @id
  bus_route           String
  bus_type            String
  date_assigned       DateTime
  trip_fuel_expense   Decimal  @db.Decimal(20, 4)
  trip_revenue        Decimal  @db.Decimal(20, 4)
  is_revenue_recorded Boolean  @default(false)
  assignment_type     String
  last_updated        DateTime @default(now())
  is_expense_recorded Boolean  @default(false)
  assignment_value    Decimal  @db.Decimal(20, 4)
  bus_plate_number    String
  payment_method      String
  conductor_id        String
  driver_id           String
}

model Receipt {
  receipt_id          String              @id
  supplier            String
  vat_reg_tin         String?
  date_paid           DateTime?
  total_amount        Decimal             @db.Decimal(20, 4)
  vat_amount          Decimal?            @db.Decimal(20, 4)
  total_amount_due    Decimal             @db.Decimal(20, 4)
  created_at          DateTime            @default(now())
  updated_at          DateTime?
  created_by          String
  transaction_date    DateTime
  is_deleted          Boolean             @default(false)
  deleted_at          DateTime?
  deleted_by          String?
  deletion_reason     String?
  ocr_confidence      Float?
  ocr_file_path       String?
  remarks             String?
  storage_size_bytes  BigInt?
  updated_by          String?
  is_expense_recorded Boolean             @default(false)
  category_id         String
  source_id           String?
  payment_status_id   String
  terms_id            String
  expense             ExpenseRecord?
  transactions        ItemTransaction[]
  category            GlobalCategory      @relation(fields: [category_id], references: [category_id])
  payment_status      GlobalPaymentStatus @relation(fields: [payment_status_id], references: [id])
  source              GlobalSource?       @relation(fields: [source_id], references: [source_id])
  terms               GlobalTerms         @relation(fields: [terms_id], references: [id])
  exports             ReceiptExport[]
  items               ReceiptItem[]
  keywords            ReceiptKeyword[]
  ocr_fields          ReceiptOCRField[]

  @@index([transaction_date, is_deleted])
}

model ReceiptItem {
  receipt_item_id        String    @id
  receipt_id             String
  quantity               Decimal   @db.Decimal(10, 2)
  unit_price             Decimal   @db.Decimal(20, 4)
  total_price            Decimal   @db.Decimal(20, 4)
  created_at             DateTime  @default(now())
  updated_at             DateTime?
  created_by             String
  is_deleted             Boolean   @default(false)
  ocr_confidence         Float?
  updated_by             String?
  item_id                String
  is_inventory_processed Boolean   @default(false)
  item                   Item      @relation(fields: [item_id], references: [item_id])
  receipt                Receipt   @relation(fields: [receipt_id], references: [receipt_id], onDelete: Cascade)

  @@unique([receipt_id, item_id])
}

model Item {
  item_id       String            @id
  item_name     String            @unique
  created_at    DateTime          @default(now())
  updated_at    DateTime?
  is_deleted    Boolean           @default(false)
  category_id   String
  unit_id       String
  category      GlobalCategory    @relation(fields: [category_id], references: [category_id])
  unit          GlobalItemUnit    @relation(fields: [unit_id], references: [id])
  transactions  ItemTransaction[]
  receipt_items ReceiptItem[]

  @@index([item_name, is_deleted])
  @@index([category_id, is_deleted])
  @@index([is_deleted, category_id, item_name])
}

model ItemTransaction {
  transaction_id   String    @id
  item_id          String
  receipt_id       String?
  quantity         Decimal   @db.Decimal(10, 2)
  unit_price       Decimal   @db.Decimal(20, 4)
  transaction_date DateTime  @default(now())
  created_by       String
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  is_deleted       Boolean   @default(false)
  item             Item      @relation(fields: [item_id], references: [item_id])
  receipt          Receipt?  @relation(fields: [receipt_id], references: [receipt_id])

  @@index([item_id, transaction_date])
  @@index([transaction_date, is_deleted])
  @@index([is_deleted, transaction_date])
  @@index([item_id, is_deleted, transaction_date])
}

model ReceiptExport {
  export_id    String       @id
  receipt_id   String
  format       ExportFormat
  exported_by  String
  exported_at  DateTime     @default(now())
  filters_used Json?
  file_path    String?
  receipt      Receipt      @relation(fields: [receipt_id], references: [receipt_id])
}

model ReceiptStorageConfig {
  config_id           String   @id
  auto_archive_months Int      @default(6)
  last_cleanup        DateTime @default(now())
  updated_by          String
  updated_at          DateTime @default(now())
}

model ReceiptOCRField {
  field_id              String    @id
  receipt_id            String
  field_name            String
  extracted_value       String
  confidence_score      Float
  is_verified           Boolean   @default(false)
  verified_by           String?
  verified_at           DateTime?
  original_image_coords Json?
  created_at            DateTime  @default(now())
  updated_at            DateTime?
  receipt               Receipt   @relation(fields: [receipt_id], references: [receipt_id])

  @@unique([receipt_id, field_name])
}

model ReceiptKeyword {
  keyword_id String   @id
  receipt_id String
  keyword    String
  source     String
  confidence Float?
  created_at DateTime @default(now())
  receipt    Receipt  @relation(fields: [receipt_id], references: [receipt_id])

  @@index([keyword])
}

model ReceiptStorageMetrics {
  metric_id          String   @id
  total_receipts     Int      @default(0)
  storage_used_bytes BigInt   @default(0)
  last_updated       DateTime @default(now())
  created_by         String
  updated_by         String?
}

model EmployeeCache {
  employee_id  String   @id
  name         String
  job_title    String
  last_updated DateTime @default(now())
}

model Reimbursement {
  reimbursement_id  String                    @id @default(uuid())
  expense_id        String
  employee_id       String
  employee_name     String
  job_title         String?
  amount            Decimal                   @db.Decimal(20, 4)
  requested_date    DateTime                  @default(now())
  approved_by       String?
  approved_date     DateTime?
  rejection_reason  String?
  paid_by           String?
  paid_date         DateTime?
  payment_reference String?
  payment_method    String?
  created_by        String
  created_at        DateTime                  @default(now())
  updated_by        String?
  updated_at        DateTime?
  is_deleted        Boolean                   @default(false)
  cancelled_by      String?
  cancelled_date    DateTime?
  status_id         String
  remarks           String?
  expense           ExpenseRecord             @relation(fields: [expense_id], references: [expense_id])
  status            GlobalReimbursementStatus @relation(fields: [status_id], references: [id])

  @@unique([expense_id, employee_id])
}

model GlobalSource {
  source_id          String          @id @default(uuid())
  name               String          @unique
  applicable_modules String[]
  is_deleted         Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime?
  expenses           ExpenseRecord[]
  receipts           Receipt[]
  revenues           RevenueRecord[]
}

model GlobalCategory {
  category_id        String          @id @default(uuid())
  name               String          @unique
  applicable_modules String[]
  is_deleted         Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime?
  expenses           ExpenseRecord[]
  items              Item[]
  receipts           Receipt[]
  revenues           RevenueRecord[]
}

model GlobalPaymentStatus {
  id                 String    @id @default(uuid())
  name               String    @unique
  is_deleted         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime?
  applicable_modules String[]
  receipts           Receipt[]
}

model GlobalTerms {
  id                 String    @id @default(uuid())
  name               String    @unique
  is_deleted         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime?
  applicable_modules String[]
  receipts           Receipt[]
}

model GlobalItemUnit {
  id                 String    @id @default(uuid())
  name               String    @unique
  is_deleted         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime?
  applicable_modules String[]
  items              Item[]
}

model GlobalPaymentMethod {
  id                 String          @id @default(uuid())
  name               String          @unique
  is_deleted         Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime?
  applicable_modules String[]
  expenses           ExpenseRecord[]
}

model GlobalReimbursementStatus {
  id                 String          @id @default(uuid())
  name               String          @unique
  is_deleted         Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime?
  applicable_modules String[]
  reimbursements     Reimbursement[]
}

model PayrollFrequencyConfig {
  id              String   @id @default(uuid())
  employee_number String   @unique
  payroll_period  String
  effective_date  DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PayrollConfiguration {
  id                   String   @id @default(uuid())
  company_id           String
  default_work_days    Int      @default(22)
  weekend_work_allowed Boolean  @default(false)
  holiday_work_rate    Decimal  @default(1.5) @db.Decimal(5, 2)
  overtime_rate        Decimal  @default(1.25) @db.Decimal(5, 2)
  created_at           DateTime @default(now())
}

model PayrollRecord {
  payroll_id              String    @id @default(uuid())
  employee_number         String
  employee_name           String
  first_name              String
  middle_name             String?
  last_name               String
  suffix                  String?
  employee_status         String
  hire_date               DateTime
  termination_date        DateTime?
  job_title               String
  department              String
  payroll_period          String
  payroll_start_date      DateTime
  payroll_end_date        DateTime
  basic_rate              Decimal   @db.Decimal(20, 4)
  days_worked             Int       @default(0)
  basic_pay               Decimal   @default(0) @db.Decimal(20, 4)
  overtime_regular        Decimal   @default(0) @db.Decimal(20, 4)
  overtime_holiday        Decimal   @default(0) @db.Decimal(20, 4)
  service_incentive_leave Decimal   @default(0) @db.Decimal(20, 4)
  holiday_pay             Decimal   @default(0) @db.Decimal(20, 4)
  thirteenth_month_pay    Decimal   @default(0) @db.Decimal(20, 4)
  revenue_benefit         Decimal   @default(0) @db.Decimal(20, 4)
  safety_benefit          Decimal   @default(0) @db.Decimal(20, 4)
  additional_benefits     Decimal   @default(0) @db.Decimal(20, 4)
  sss_deduction           Decimal   @default(0) @db.Decimal(20, 4)
  philhealth_deduction    Decimal   @default(0) @db.Decimal(20, 4)
  pag_ibig_deduction      Decimal   @default(0) @db.Decimal(20, 4)
  cash_advance            Decimal   @default(0) @db.Decimal(20, 4)
  damage_shortage         Decimal   @default(0) @db.Decimal(20, 4)
  other_deductions        Decimal   @default(0) @db.Decimal(20, 4)
  gross_total_earnings    Decimal   @default(0) @db.Decimal(20, 4)
  total_deductions        Decimal   @default(0) @db.Decimal(20, 4)
  net_pay                 Decimal   @default(0) @db.Decimal(20, 4)
  status                  String    @default("Pending")
  date_released           DateTime?
  created_by              String
  created_at              DateTime  @default(now())
  updated_by              String?
  updated_at              DateTime?
  is_deleted              Boolean   @default(false)
  calculation_notes       String?
  deleted_at              DateTime?
  deleted_by              String?
  hr_data_snapshot        Json?
  processed_benefits      Json?
  processed_deductions    Json?

  @@unique([employee_number, payroll_start_date, payroll_end_date])
  @@index([payroll_start_date, payroll_end_date])
  @@index([employee_number, is_deleted])
}

enum ExportFormat {
  CSV
  PDF
  XSL
}
